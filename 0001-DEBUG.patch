From 11678b0b6f530a657fb37d28b4cdd68292977eef Mon Sep 17 00:00:00 2001
From: "Brett T. Warden" <brett.t.warden@intel.com>
Date: Mon, 18 May 2020 10:20:10 -0700
Subject: [PATCH] DEBUG

---
 share/templates/create_default_templates.py | 12 ++++++++++++
 1 file changed, 12 insertions(+)

diff --git a/share/templates/create_default_templates.py b/share/templates/create_default_templates.py
index adbfb80a4d9f..8a8a971dac2f 100755
--- a/share/templates/create_default_templates.py
+++ b/share/templates/create_default_templates.py
@@ -35,12 +35,17 @@ languages = [os.path.splitext(language)[0] for language in languages]  # split e
 
 # process each language sequentially
 for language in languages:
+    print("BTW: language: {}".format(language))
     # copy .gmo file into a location where gettext can find and use it
     source = binary_dir + '/po/' + language + '.gmo'
     destination_dir = binary_dir + '/po/locale/' + language + '/LC_MESSAGES/'
     destination = destination_dir + 'inkscape.mo'
+    print("BTW: source: {}".format(source))
+    print("BTW: destination_dir: {}".format(destination_dir))
+    print("BTW: destination: {}".format(destination))
 
     if not os.path.isdir(destination_dir):
+        print("BTW: making destination_dir: {}".format(destination_dir))
         os.makedirs(destination_dir)
     shutil.copy(source, destination)
 
@@ -54,15 +59,22 @@ for language in languages:
     # now create localized version of English template file (if we have a translation)
     template_file = source_dir + '/share/templates/default.svg'
     output_file = binary_dir + '/share/templates/default.' + language + '.svg'
+    print("BTW: template_file: {}".format(template_file))
+    print("BTW: output_file: {}".format(output_file))
 
     if os.path.isfile(output_file):
+        print("BTW: removing output_file: {}".format(output_file))
         os.remove(output_file)
     if translated_string != LAYER_STRING:
         with open(template_file, 'r', encoding='utf-8', newline='\n') as file:
+            print("BTW: reading template_file: {}".format(template_file))
             filedata = file.read()
         filedata = filedata.replace('Layer', translated_string)
         with open(output_file, 'w', encoding='utf-8', newline='\n') as file:
+            print("BTW: writing output_file: {}".format(output_file))
             file.write(filedata)
+    else:
+        print("BTW: translated_string ({}) != LAYER_STRING ({})".format(translated_string, LAYER_STRING))
 
 
 # create timestamp file (indicates last successful creation for build system)
-- 
2.26.2

